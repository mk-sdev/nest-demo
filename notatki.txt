AUTENTYKACJA
 - w module rejestrujesz JwtModule jako import
 - definiujesz JWT constans
 - w robisz funkcję signIn, która pobiera użytkownika o podanym nicku z bazy, sprawdza czy hasło zapisane i podane są takie same i generuje jwt i go zwraca do klienta
 - tworzysz funkcję register, która haszuje i dodaje do bazy
 - tworzysz authguarda, który weryfikuje tokeny
 - w main.ts:
  import * as cookieParser from 'cookie-parser';
  app.use(cookieParser())

AUTORYZACJA
Oprócz tego co powyżej, należy przygotować:
- enum z rolami
- dekorator Roles() - który pobiera metadane i przekazuje do roles guarda
- roles guarda
do chronionych routów dodajemy:
  @Roles(Role.Admin)
  @UseGuards(AuthGuard, RolesGuard)

Aby zintegrować moduł auth z resztą aplikacji, np. żeby nowe zadanie dodawało się tylko na konto konkretnego użytkownika, to używamy AuthGuard i za pomocą @Res() pobieramy userId, które jest dostarczane przez jwt.

BAZA DANYCH (TypeORM)
 - w app.module dodaj import TypeOrmModule.forRoot({...})
 - stwórz entity - klasę reprezentującą tabelę
 - w module w którym używasz bazy dodaj imports: [TypeOrmModule.forFeature([User])],
 - w serwisie wsztruknij:     
    @InjectRepository(UserEntity)
    private usersRepository: Repository<UserEntity>,
 - użyj w serwisie funkcji np. this.usersRepository.find()

 MONGODB (mongoose):
 - w app.module dodaj import MongooseModule.forRoot('mongodb://localhost:27017/nestdb')
 - utwórz schema
 - w module ze schema dodaj import: MongooseModule.forFeature([{ name: User_.name, schema: UserSchema }])
 - wstrzyknij model w serwis: @InjectModel(User_.name) private userModel: Model<UserDocument>
 - użyj funkcji w serwisie

 UWAGA: nie trzeba podawać w kodzie ID, bo baza sama za nas je wygeneruje 

REDIS:
-  w module gdzie będzie używany: 
import * as redisStore from 'cache-manager-ioredis';
import { CacheModule } from '@nestjs/cache-manager';
    CacheModule.registerAsync({
      useFactory: () => ({
        store: redisStore,
        host: 'localhost',
        port: 6379,
        ttl: 1000, // na ile milisekund ma się zapamiętać
      }),
    }),
- w serwisie wstrzyknąć:     
    @Inject(CACHE_MANAGER)
    private cacheManager: Cache,
a także zaimportować:
  import { CACHE_MANAGER } from '@nestjs/cache-manager';
  import { Cache } from 'cache-manager';

PRISMA:
- npm install prisma --save-dev
  npm install @prisma/client
  npm install @nestjs/config
- stwórz plik .env i wpisz: DATABASE_URL="mysql://user:password@localhost:3306/nazwa_bazy"
- w app.module dodaj: 
  import { ConfigModule } from '@nestjs/config';
  ConfigModule.forRoot({
    isGlobal: true, // ← umożliwia korzystanie z .env w całej aplikacji
  }),
- zainicjuj prisma: npx prisma init
  to utworzy ci folder prisma, a w nim schema.prisma. Do tego pliku wpisz:
  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
  }
- w tym samym pliku utwórz model:
  model User {
    userId   Int    @id @default(autoincrement())
    username String @unique
    password String
  }
- wygeneruj klienta prisma i zmigruj bazę:
  npx prisma migrate dev --name init
- w folderze pisma stwórz prisma.service.ts:
    // src/prisma/prisma.service.ts
    import { Injectable, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
    import { PrismaClient } from '@prisma/client';

    @Injectable()
    export class PrismaService extends PrismaClient implements OnModuleInit, OnModuleDestroy {
      async onModuleInit() {
        await this.$connect();
      }

      async onModuleDestroy() {
        await this.$disconnect();
      }
    }
- tak samo stwórz moduł:
  // src/prisma/prisma.module.ts
  import { Global, Module } from '@nestjs/common';
  import { PrismaService } from './prisma.service';

  @Global() // ← dzięki temu nie trzeba importować w każdym module
  @Module({
    providers: [PrismaService],
    exports: [PrismaService],
  })
  export class PrismaModule {}
- dodaj ten moduł do app.module
  użyj prisma w serwisach:
  import { PrismaService } from '../prisma/prisma.service';
  ...
  constructor(private prisma: PrismaService) {}
  ...
  return this.prisma.user.findMany();
- po drodze jeszcze  było coś takiego jak "prisma generate" xdd ale już nie pamiętam gdzie dokładnie. W każdym razie jak wywala błąd  wterminalu to pewnie wtedy. Tak samo jak dokonujesz jakiejś zmiany w schema.prisma to prisma generate

RABBITMQ:
- pnpm install @nestjs/microservices amqplib
- w main.ts:
  import { MicroserviceOptions, Transport } from '@nestjs/microservices';
  ...
    app.connectMicroservice<MicroserviceOptions>({
    transport: Transport.RMQ,
    options: {
      urls: ['amqp://localhost:5672'],
      queue: 'user_queue',
      queueOptions: { durable: false },
    },
  });

  await app.startAllMicroservices();
- w app.module:
  import { ClientsModule, Transport } from '@nestjs/microservices';
  ...
      ClientsModule.register([
      {
        name: 'USER_SERVICE',
        transport: Transport.RMQ,
        options: {
          urls: ['amqp://localhost:5672'],
          queue: 'user_queue',
          queueOptions: { durable: false },
        },
      },
    ]),
- w serwisie:
  import { ClientProxy } from '@nestjs/microservices';
  ...
    constructor(@Inject('USER_SERVICE') private client: ClientProxy) {}

  sendUserData(user: any) {
    return this.client.emit('user_created', user);
  }
- w kontrolerze:
  import { EventPattern } from '@nestjs/microservices';
    @EventPattern('user_created')
  handleUserCreated(data: any) {
    console.log('User received in consumer:', data);
  }

  @Post('send')
  send(@Body() user: any) {
    return this.appService.sendUserData(user);
  }



Guardy: muszą implementować CanActivate

import { Injectable, CanActivate, ExecutionContext } from '@nestjs/common';

@Injectable()
export class MyGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    // logika dostępu
    return true;
  }
}

// Pipe
import { PipeTransform, Injectable, ArgumentMetadata } from '@nestjs/common';

@Injectable()
export class MyPipe implements PipeTransform {
  transform(value: any, metadata: ArgumentMetadata) {
    // modyfikacja lub walidacja value
    return value;
  }
}

// interceptor
import { Injectable, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { Observable } from 'rxjs';
import { tap } from 'rxjs/operators';

@Injectable()
export class MyInterceptor implements NestInterceptor {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    console.log('Before...');
    return next.handle().pipe(
      tap(() => console.log('After...')),
    );
  }
}


//exception filter
import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';

@Catch(HttpException)
export class MyFilter implements ExceptionFilter {
  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const response = ctx.getResponse();

    response.status(exception.getStatus()).json({
      statusCode: exception.getStatus(),
      message: exception.message,
    });
  }
}

// Middleware:
import { Injectable, NestMiddleware } from '@nestjs/common';
import { Request, Response, NextFunction } from 'express';

@Injectable()
export class MyMiddleware implements NestMiddleware {
  use(req: Request, res: Response, next: NextFunction) {
    console.log('Request...');
    next();
  }
}

expo:
- dodawanie zdjęć (wielu na raz), gdzie można określić: tagi, opis, miejsce wyświetlają się tam 
  też ostatnio używane i najpopularniejsze tagi
- wyświetlanie zdjęć i zaawansowanie opcje filtrowania
- zanim wyświetlanie to zapytanie do cloudflare workers o autoryzację, tylko nwm czy wszystkie 
  na raz, czy w pętli, czy w grupach co 10.
- auth panel
- wyświetlanie ostatnich zdjęć z galerii
- pobieranie zdjęć jako lazy load + infinite scroll
- moje konto, gdzie można usunąć, zmienić hasło lub email
- można zaznaczyć wiele zdjęć na raz i je jednocześnie edytować lub usunąć
- jak się tapnie na zdjęcie to się wyświetla ono + jego tagi, opis itp.
- twoje wszystkie tagi wraz z liczbą zdjęć
- jakiś pasek postępu w uploadingu zdjęć
- (zaawansowane) mapka pokazująca gdzie jake zdjęcia zostały zrobione
- (zaawansowane) wywołanie mikroserwisu Flask, którydby analizował zdjęcia i automatycznie 
  przydzielał tagi
- (zaawansowane) możliwość ustawienia współwłaścicieli zdjęcia tak że im też będą się one 
  wyświetlały
- możliwość pobrania wszystkich zdjęć na urządzenie

nest auth:
- tworzenie konta (mail i hasło)
- usuwanie konta + dwutygodniowy okres przejściowy
- zmienianie hasła
- zmienianie maila
- przypominanie hasła
- (zaawansowane) co jeśli user  zapomniał hasła i do ImageHub i do maila

spring:
- GraphQL pobiera rekordy z bazy mongo lub postgres
- serwer następnie je zwraca do frontendu, po drodze cache`ując

- otrzymane zdjęcia (+ jwt) za pomocą RabbitMQ będą musiały być dodane do R2, a nstępnie do bazy
  Na podstawie JWT serwer wie kogo wpisać jako właściciela w bazie
- jednocześnie SocketIO wysyła na frontend postęp w dodawaniu

- usunięcie zdjęć i je modyfikwowanie, prawdopodobnie poprzez rabbitmq (potrzebne jwt)

cloudflare workers:
- autorzyują zapytanie o obraz
- zwracają plik zdjęciowy
